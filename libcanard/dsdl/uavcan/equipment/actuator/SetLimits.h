/*
 * UAVCAN data structure definition for libcanard.
 *
 * Autogenerated, do not edit.
 *
 * Source file: /home/hose/libs/libcanard/dsdl_compiler/uavcan/equipment/actuator/1013.SetLimits.uavcan
 */

#ifndef __UAVCAN_EQUIPMENT_ACTUATOR_SETLIMITS
#define __UAVCAN_EQUIPMENT_ACTUATOR_SETLIMITS

#include <stdint.h>
#include "canard.h"

#ifdef __cplusplus
extern "C"
{
#endif

/******************************* Source text **********************************
#
# Generic actuator homing message if available.
# Unknown fields should be set to NAN.
#

uint8 actuator_id

#
# Whether the units are linear or angular depends on the actuator type (refer to the Command data type).
# offset means the offset of the min/max limit from the home position, home_now makes the actuator assume the current position is home
#
bool use_limits	    # true or false
float16 offset        	    # meter or radian
float16 limit_max           # meter or radian
float16 limit_min           # meter or radian
bool home_now	    # true or false
******************************************************************************/

/********************* DSDL signature source definition ***********************
uavcan.equipment.actuator.SetLimits
saturated uint8 actuator_id
saturated bool use_limits
saturated float16 offset
saturated float16 limit_max
saturated float16 limit_min
saturated bool home_now
******************************************************************************/

#define UAVCAN_EQUIPMENT_ACTUATOR_SETLIMITS_ID             1013
#define UAVCAN_EQUIPMENT_ACTUATOR_SETLIMITS_NAME           "uavcan.equipment.actuator.SetLimits"
#define UAVCAN_EQUIPMENT_ACTUATOR_SETLIMITS_SIGNATURE      (0x98CDD3FE86EE5601ULL)

#define UAVCAN_EQUIPMENT_ACTUATOR_SETLIMITS_MAX_SIZE       ((58 + 7)/8)

// Constants

typedef struct
{
    // FieldTypes
    uint8_t    actuator_id;                   // bit len 8
    bool       use_limits;                    // bit len 1
    float      offset;                        // float16 Saturate
    float      limit_max;                     // float16 Saturate
    float      limit_min;                     // float16 Saturate
    bool       home_now;                      // bit len 1

} uavcan_equipment_actuator_SetLimits;

extern
uint32_t uavcan_equipment_actuator_SetLimits_encode(uavcan_equipment_actuator_SetLimits* source, void* msg_buf);

extern
int32_t uavcan_equipment_actuator_SetLimits_decode(const CanardRxTransfer* transfer, uint16_t payload_len, uavcan_equipment_actuator_SetLimits* dest, uint8_t** dyn_arr_buf);

extern
uint32_t uavcan_equipment_actuator_SetLimits_encode_internal(uavcan_equipment_actuator_SetLimits* source, void* msg_buf, uint32_t offset, uint8_t root_item);

extern
int32_t uavcan_equipment_actuator_SetLimits_decode_internal(const CanardRxTransfer* transfer, uint16_t payload_len, uavcan_equipment_actuator_SetLimits* dest, uint8_t** dyn_arr_buf, int32_t offset);

#ifdef __cplusplus
} // extern "C"
#endif
#endif // __UAVCAN_EQUIPMENT_ACTUATOR_SETLIMITS